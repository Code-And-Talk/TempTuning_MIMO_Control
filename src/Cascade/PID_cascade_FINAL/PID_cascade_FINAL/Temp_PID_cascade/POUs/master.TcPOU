<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="master" Id="{a879b6bf-7db0-4565-8869-c4d1ff680093}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM master
VAR
(*-------------------------------------------- master 입력 변수 --------------------------------------------*)	
	m_bRamp_Enable                   : BOOL;
	m_fRamp_Value                    : ARRAY[1..4] OF LREAL;
	
	m_fTargetTemp                    : LREAL;
	m_btuning_mode 	     			 : BOOL;
	m_Sampling_Time					 : LREAL := 10;             // Sampling time (적용시간 간격  Δt(*고정값*))
	m_integral_constant			 	 : ARRAY[1..4] OF LREAL;	//PI제어기 적분상수
	m_pi_gain                        : ARRAY[1..4] OF LREAL;	//PI제어기 이득(gain)
	
	m_Set_Value						 : ARRAY[1..4] OF LREAL;
	m_fLast_Set_Value            	 : ARRAY[1..4] OF LREAL;
	m_Heatup_On				 		 : BOOL;
	m_Tuning_Set_Temp				 : LREAL;
	m_Tune_On						 : BOOL;
	bStart							 : BOOL;
	bSecondStart					 : BOOL;
	m_Heatup_Start_Temp				 : ARRAY[1..4] OF LREAL;
	m_Zone_Sum						 : LREAL;
	m_Zone_Avg						 : LREAL; // ActTemp(fPV_Value) 평균
	m_Zone_Max						 : LREAL;
	m_Zone_Min						 : LREAL;
	m_Zone_Dev						 : LREAL;
	
	tWait_Time						 :	TON;
(*---------------------------------------- Substrate Simulation ----------------------------------------------- *)
	fMV_Out						     : ARRAY[1..4] OF LREAL;
	fMV_Out_Sub					     : ARRAY[1..9] OF LREAL;
	fPV_Value_Sub					 : ARRAY[1..9] OF LREAL;
	fPV_Value_Local_Sub				 : ARRAY[1..9] OF LREAL;
	fbCTRL_PT2_Sub			         : ARRAY[1..9] OF FB_CTRL_PT2;
	stPTParams_Sub			         : ARRAY[1..9] OF ST_CTRL_PT2_PARAMS;
	fKp_Sub						     : ARRAY[1..9] OF REAL := [15.7, 15.8, 15.3, 15.1, 15.0, 15.5, 15.6, 15.2, 15.4];
	fInit_Temp_Sub				     : ARRAY[1..9] OF REAL := [23.5, 23.6, 23.7, 23.8, 23.9, 24.0, 24.1, 24.2, 24.3];
	tTimeConstant_Sub			     : ARRAY[1..9] OF TIME := [T#325.7S, T#335.5S, T#328.4S, T#321.9S, T#330.3S, T#324.2S, T#329.9S, T#329.4S, T#325.1S];
	
(*-------------------------------------------- master 출력 변수 --------------------------------------------*)

	master_Zone_AVG                :   ARRAY[1..4] OF LREAL;                	// 글래스 온도 평균(4개 더해서 4로 나눔)
	master_subTC 				   :   LREAL;
	
	Substrate_AvgTemp			   :   ARRAY[1..4] OF LREAL;
	
	mErr_Value                     :   ARRAY[1..4] OF LREAL;                    // 제어오차 (set_temp - msater_subTC_AVG)
	mErr_integral_Val			   :   ARRAY[1..4] OF LREAL := [0 , 0, 0, 0 ];  // 오차의 적분(se , 초기값 = 0)
	
	m_min_per					   :	LREAL;
	m_max_per					   :	LREAL;
	m_Zone_Temp_Min                :    LREAL;
	m_Zone_Temp_Max                :    LREAL;
	
	m_Last_Zone_Temp_AVG		   :	ARRAY[1..4] OF LREAL; 
	
	i							   :	INT;
	
	fbCTRL_RAMP_GENERATOR		   :    ARRAY[1..4] OF FB_CTRL_RAMP_GENERATOR;
	stCTRL_RAMP_GENERATOR_PARAMS   :    ARRAY[1..4] OF ST_CTRL_RAMP_GENERATOR_PARAMS;
	
	tTime						   :	TIME;
	tTaskCycleTime				   :	TIME := T#1MS;
	tCtrlCycleTime				   :	TIME := T#200MS;
	
	fbCTRL_PT2				       : 	ARRAY[1..4] OF FB_CTRL_PT2;
	stPTParams				       : 	ARRAY[1..4] OF ST_CTRL_PT2_PARAMS;
	
	glass_max 					   :	LREAL ;
	glass_min 					   :	LREAL ;
	glass_dev					   :	LREAL ;       (* glss_max - glass_min *)
	glass_AVG                      : 	LREAL;        (* 글래스 온도 평균(9개 평균 = g_bar)*)
	
	mErr_Old_Value                 :   	ARRAY[1..4] OF LREAL;   (* 전회 제어 오차 *)
	fKd							   : 	LREAL := 1;		(* 공정 상수 *)
	
(*===================================결과 출력값==========================================================*)
	result_zone_set_val			   :	ARRAY [1..4] OF LREAL ;
	result_glass_dev			   :	LREAL := 10 ;
	result_subTC_AVG			   :	LREAL := 0 ;
	rampBool 					   :	BOOL ;
	zoneIndex					   :	INT ;
	
(* ------------------------------------------Ramp Parameter Set-------------------------------------- *)
	m_bRamp_Use				       :	BOOL ;	
	m_fRamp_Rate				   :	ARRAY[1..4] OF LREAL := [10 , 10, 10 , 10 ];
	m_fRamp_Out 			       : 	ARRAY[1..4] OF LREAL ;	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Substrate_AVG();

m_integral_constant  := gbl.master_integral_constant;
m_pi_gain    		 := gbl.master_pi_gain;
m_fTargetTemp		 := gbl.master_TargetTemp;
m_min_per		     := gbl.master_Zone_Temp_Min;
m_max_per	         := gbl.master_Zone_Temp_Max;
fPV_Value_Sub   	 := gbl.fPV_Value_SubTC ;
gbl.subTC_max		 := glass_max ;
gbl.subTC_min		 := glass_min ;
gbl.subTC_dev		 := glass_dev ;
gbl.subTC_AVG		 := glass_AVG ;
master_subTC 		 := 0 ;
tWait_Time(IN := TRUE, PT := LREAL_TO_TIME(m_Sampling_Time) * 1000);

glass_max := 0;
glass_min := 1000;
master_subTC := 0;
m_Zone_Max := 0;
m_Zone_Min := 1000;
m_Zone_Dev := 0;

FOR i:=1 TO 9 BY 1 DO
	master_subTC := master_subTC + gbl.fPV_Value_SubTC[i];
	glass_max := MAX(glass_max, gbl.fPV_Value_SubTC[i]);
	glass_min := MIN(glass_min, gbl.fPV_Value_SubTC[i]);
END_FOR
glass_dev := glass_max - glass_min;	
glass_AVG := master_subTC /9;

IF glass_dev <= 10 THEN
	IF result_glass_dev > glass_dev THEN
		result_glass_dev := glass_dev;
	END_IF
	
	IF (m_fTargetTemp * 0.9) <= glass_AVG AND (m_fTargetTemp * 1.1) >= glass_AVG THEN
		IF ABS(m_fTargetTemp - glass_AVG) < ABS(m_fTargetTemp - result_subTC_AVG) THEN
			result_subTC_AVG := glass_AVG;
		END_IF
	END_IF
END_IF

IF gbl.slave_bstart THEN
	m_tune_On := TRUE;
	bStart := TRUE;
END_IF

IF m_Tune_On THEN
	m_Zone_Sum := 0;
	FOR i:=1 TO 4 BY 1 DO
		m_Zone_Sum := m_Zone_Sum + gbl.slave_fPV_Value[i];
	END_FOR
	m_Zone_Avg := m_Zone_Sum / 4;
	m_Tuning_Set_Temp := m_Zone_Avg;
	m_Zone_Temp_Min := m_Tuning_Set_Temp - (m_Tuning_Set_Temp * m_min_per / 100);
	m_Zone_Temp_Max := m_Tuning_Set_Temp + (m_Tuning_Set_Temp * m_max_per / 100);
	IF tWait_Time.Q THEN
		tWait_Time(IN := FALSE);
		Tuning();
	END_IF
END_IF

(*
IF bStart THEN
	IF gbl.subTC_dev <= 2 THEN
		m_Tuning_Set_Temp := m_fTargetTemp;
		bSecondStart := TRUE;
		bStart := FALSE;
	END_IF
END_IF
*)

FOR i:=1 TO 4 BY 1 DO
	m_Zone_Max := MAX(m_Zone_Max, gbl.slave_fPV_Value[i]);
	m_Zone_Min := MIN(m_Zone_Min, gbl.slave_fPV_Value[i]);
END_FOR
m_Zone_Dev := m_Zone_Max - m_Zone_Min;

IF bStart THEN
	IF m_Zone_Dev <= 2 THEN
		m_Heatup_On := TRUE;
		m_Tune_On := FALSE;
		m_Heatup_Start_Temp := gbl.slave_fPV_Value;
		bSecondStart := TRUE;
		bStart := FALSE;
		gbl.isChanged := TRUE;
	END_IF
END_IF

IF m_Heatup_On THEN
	m_Zone_Temp_Min := gbl.master_TargetTemp - (gbl.master_TargetTemp * m_min_per / 100);
	m_Zone_Temp_Max := gbl.master_TargetTemp + (gbl.master_TargetTemp * m_max_per / 100);
	IF tWait_Time.Q THEN
		tWait_Time(IN := FALSE);
		HEATUP();
	END_IF
END_IF

(*
IF bSecondStart THEN
	IF gbl.master_TargetTemp <= gbl.subTC_max THEN
		m_Heatup_On := TRUE;
		m_Tune_On := FALSE;
		bSecondStart := FALSE;
	END_IF
END_IF
*)

IF bSecondStart THEN
	IF gbl.master_TargetTemp <= m_Zone_Max THEN
		m_Tune_On := TRUE;
		m_Heatup_On := FALSE;
		bSecondStart := FALSE;
		gbl.isChanged := TRUE;
	END_IF
END_IF

//gbl.slave_fTargetTemp := master_Zone_AVG;]]></ST>
    </Implementation>
    <Action Name="HEATUP" Id="{61abb805-2c73-414c-961c-5d3ed33b63a1}">
      <Implementation>
        <ST><![CDATA[(*
m_bRamp_Use     :=  gbl.master_bRamp_Enable := TRUE;
m_fRamp_Rate    :=  gbl.master_fRamp_Value;
FOR i:=1 TO 4 BY 1 DO
	stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloNeg := m_fRamp_Rate[i] / 60.0;
	stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloPos := m_fRamp_Rate[i] / 60.0;
END_FOR

IF m_bRamp_Use THEN
	FOR i:=1 TO 4 BY 1 DO
		fbCTRL_RAMP_GENERATOR[i]( bEnable   := m_bRamp_Use,
								fStart  	:= m_Heatup_Start_Temp[i],
								fTarget 	:= m_fTargetTemp,
								stParams    := stCTRL_RAMP_GENERATOR_PARAMS[i],
								fOut    	 => m_fRamp_Out[i],
								fVeloOut  	 => ,
								bValueReached => ,
								eErrorId => ,
								bError =>
								)
	;
	END_FOR					

ELSE
	FOR i:=1 TO 4 BY 1 DO
		m_fRamp_Out[i] := m_fTargetTemp;
	;
	END_FOR
END_IF
*)
IF gbl.tuningIndex=0 THEN
	FOR i:=1 TO 4 BY 1 DO
		gbl.slave_fTargetTemp[i] := gbl.master_TargetTemp;
	END_FOR
END_IF

(* tuning data 저장 *)
FOR zoneIndex:=1 TO 4 BY 1 DO
	IF gbl.tuningIndex <> 0 THEN
		master_Zone_AVG[zoneIndex] := gbl.oldData[zoneIndex, gbl.index] + fKd * ( mErr_Value[zoneIndex] - mErr_Old_Value[zoneIndex]);
		mErr_Old_Value[zoneIndex]  := mErr_Value[zoneIndex] ;
		gbl.slave_fTargetTemp[zoneIndex] := gbl.heatupData[gbl.tuningCount + 1 - gbl.tuningIndex][zoneIndex, gbl.index];
	END_IF
	gbl.newData[zoneIndex, gbl.index] := master_Zone_AVG[zoneIndex];
END_FOR
gbl.index := gbl.index + 1 ;]]></ST>
      </Implementation>
    </Action>
    <Action Name="Substrate_AVG" Id="{ec6bcec0-5768-4543-8f3c-c653a35ce223}">
      <Implementation>
        <ST><![CDATA[Substrate_AvgTemp[1] := (fPV_Value_Sub[1] + fPV_Value_Sub[2] + fPV_Value_Sub[4] + fPV_Value_Sub[5]) / 4; 
Substrate_AvgTemp[2] := (fPV_Value_Sub[2] + fPV_Value_Sub[3] + fPV_Value_Sub[5] + fPV_Value_Sub[6]) / 4; 
Substrate_AvgTemp[3] := (fPV_Value_Sub[4] + fPV_Value_Sub[5] + fPV_Value_Sub[7] + fPV_Value_Sub[8]) / 4; 
Substrate_AvgTemp[4] := (fPV_Value_Sub[5] + fPV_Value_Sub[6] + fPV_Value_Sub[8] + fPV_Value_Sub[9]) / 4; ]]></ST>
      </Implementation>
    </Action>
    <Action Name="Substrate_Simulation" Id="{108ac06f-2968-4bd6-8d2a-f38f7f2d45c0}">
      <Implementation>
        <ST><![CDATA[fMV_Out:= gbl.slave_fPV_Value;

gbl.fPV_Value_SubTC[1] := fMV_Out[1] - 2.5;
gbl.fPV_Value_SubTC[2] := (fMV_Out[1] + fMV_Out[2]) / 2 - 3.4;
gbl.fPV_Value_SubTC[3] := fMV_Out[2] - 3.1;
gbl.fPV_Value_SubTC[4] := (fMV_Out[1] + fMV_Out[3]) / 2 - 3.5;
gbl.fPV_Value_SubTC[5] := (fMV_Out[1] + fMV_Out[2]+ fMV_Out[3] + fMV_Out[4]) / 4 - 4;
gbl.fPV_Value_SubTC[6] := (fMV_Out[2] + fMV_Out[4]) / 2 - 3.2;
gbl.fPV_Value_SubTC[7] := fMV_Out[3] - 2.6;
gbl.fPV_Value_SubTC[8] := (fMV_Out[3] + fMV_Out[4]) / 2 - 3.4;
gbl.fPV_Value_SubTC[9] := fMV_Out[4] - 2.1;


(*
fMV_Out_Sub[1] := fMV_Out[1];

IF fMV_Out[1] = 0 AND fMV_Out[2] = 0 THEN
	fMV_Out_Sub[2] := 0;
ELSE
	fMV_Out_Sub[2] := (fMV_Out[1] + fMV_Out[2]) / 2;
END_IF

fMV_Out_Sub[3] := fMV_Out[2];

IF fMV_Out[1] = 0 AND fMV_Out[3] = 0 THEN
	fMV_Out_Sub[4] := 0;
ELSE
	fMV_Out_Sub[4] := (fMV_Out[1] + fMV_Out[3]) / 2;
END_IF

IF fMV_Out[1] = 0 AND fMV_Out[2] = 0 AND fMV_Out[3] = 0 AND fMV_Out[3] = 0 THEN
	fMV_Out_Sub[5] := 0;
ELSE
	fMV_Out_Sub[5] := (fMV_Out[1] + fMV_Out[2] + fMV_Out[3] + fMV_Out[4]) / 4;
END_IF

IF fMV_Out[2] = 0 AND fMV_Out[4] = 0 THEN
	fMV_Out_Sub[6] := 0;
ELSE
	fMV_Out_Sub[6] := (fMV_Out[2] + fMV_Out[4]) / 2;
END_IF

fMV_Out_Sub[7] := fMV_Out[3];

IF fMV_Out[3] = 0 AND fMV_Out[4] = 0 THEN
	fMV_Out_Sub[8] := 0;
ELSE
	fMV_Out_Sub[8] := (fMV_Out[3] + fMV_Out[4]) / 2;
END_IF

fMV_Out_Sub[9] := fMV_Out[4];


FOR i:=1 TO 9 BY 1 DO
	stPTParams_Sub[i].tTaskCycleTime	:= tTaskCycleTime;
	stPTParams_Sub[i].tCtrlCycleTime	:= tCtrlCycleTime;
	stPTParams_Sub[i].tT1				:= stPTParams_Sub[i].tT2 := tTimeConstant_Sub[i];
	stPTParams_Sub[i].fKp				:= fKp_Sub[i];


	fbCTRL_PT2_Sub[i](
					fIn			:= fMV_Out_Sub[i] ,
					eMode		:= 2,
					stParams	:= stPTParams_Sub[i],
					fOut		=> fPV_Value_Local_Sub[i]
					);	
					
	IF fPV_Value_Local_Sub[i] <= fInit_Temp_Sub[i] THEN
		fPV_Value_Sub[i] := fInit_Temp_Sub[i];
	ELSE
		fPV_Value_Sub[i] := fPV_Value_Local_Sub[i];
	END_IF 	
	
END_FOR
*)
]]></ST>
      </Implementation>
    </Action>
    <Action Name="TUNING" Id="{0442d04a-e41e-4116-a921-a23e4ffd5d1f}">
      <Implementation>
        <ST><![CDATA[IF m_fTargetTemp > 0 THEN
			
	FOR i:=1 TO 4 BY 1 DO
		
		mErr_Value[i] := m_Tuning_Set_Temp - Substrate_AvgTemp[i];
		mErr_integral_Val[i] := mErr_integral_Val[i] + (mErr_Value[i] * m_Sampling_Time);
		master_Zone_AVG[i] := (m_pi_gain[i] * mErr_Value[i]) + (m_pi_gain[i] / m_integral_constant[i] * mErr_integral_Val[i]) + m_Tuning_Set_Temp; 
		
		m_Last_Zone_Temp_AVG[i] := master_Zone_AVG[i];
		
		IF master_Zone_AVG[i] < m_Zone_Temp_Min THEN
			master_Zone_AVG[i] := m_Zone_Temp_Min;
			mErr_integral_Val[i] :=  mErr_integral_Val[i] - mErr_Value[i]* m_Sampling_Time;
		ELSIF master_Zone_AVG[i] > m_Zone_Temp_Max THEN
			master_Zone_AVG[i] := m_Zone_Temp_Max; 
			mErr_integral_Val[i] :=  mErr_integral_Val[i] - mErr_Value[i]* m_Sampling_Time;
		END_IF
	END_FOR	
	gbl.slave_fTargetTemp := master_Zone_AVG;
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="master">
      <LineId Id="1588" Count="17" />
      <LineId Id="1712" Count="0" />
      <LineId Id="1723" Count="1" />
      <LineId Id="1606" Count="22" />
      <LineId Id="1634" Count="3" />
      <LineId Id="1744" Count="0" />
      <LineId Id="1741" Count="2" />
      <LineId Id="1740" Count="0" />
      <LineId Id="1739" Count="0" />
      <LineId Id="1638" Count="16" />
      <LineId Id="1717" Count="2" />
      <LineId Id="1721" Count="0" />
      <LineId Id="1720" Count="0" />
      <LineId Id="1722" Count="0" />
      <LineId Id="1655" Count="2" />
      <LineId Id="1728" Count="0" />
      <LineId Id="1659" Count="3" />
      <LineId Id="1746" Count="0" />
      <LineId Id="1663" Count="3" />
      <LineId Id="1668" Count="1" />
      <LineId Id="1671" Count="2" />
      <LineId Id="1675" Count="1" />
      <LineId Id="1706" Count="0" />
      <LineId Id="1677" Count="7" />
      <LineId Id="1707" Count="0" />
      <LineId Id="1686" Count="5" />
      <LineId Id="1747" Count="0" />
      <LineId Id="1692" Count="1" />
      <LineId Id="1705" Count="0" />
      <LineId Id="1449" Count="0" />
    </LineIds>
    <LineIds Name="master.HEATUP">
      <LineId Id="2" Count="0" />
      <LineId Id="26" Count="4" />
      <LineId Id="24" Count="0" />
      <LineId Id="3" Count="20" />
      <LineId Id="1" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="33" Count="4" />
      <LineId Id="68" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="master.Substrate_AVG">
      <LineId Id="2" Count="2" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="master.Substrate_Simulation">
      <LineId Id="331" Count="1" />
      <LineId Id="322" Count="7" />
      <LineId Id="318" Count="3" />
      <LineId Id="257" Count="58" />
      <LineId Id="1" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="317" Count="0" />
    </LineIds>
    <LineIds Name="master.TUNING">
      <LineId Id="26" Count="6" />
      <LineId Id="36" Count="1" />
      <LineId Id="56" Count="0" />
      <LineId Id="68" Count="5" />
      <LineId Id="57" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>