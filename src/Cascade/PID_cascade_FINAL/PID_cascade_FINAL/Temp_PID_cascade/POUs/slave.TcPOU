<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="slave" Id="{9ab2669f-726a-4789-9ecc-1bd43afc795d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM slave
VAR
	s_fMV_Out					:			ARRAY[1..4] OF LREAL;
	s_fPV_Value					:			ARRAY[1..4] OF LREAL;
	fPV_Value_					:			ARRAY[1..4] OF LREAL;
	
	tTime						:			TIME;
	tTaskCycleTime				:			TIME := T#1MS;
	tCtrlCycleTime				:			TIME := T#200MS;
	
	fbCTRL_PT2				    : 			ARRAY[1..4] OF FB_CTRL_PT2;
	stPTParams				    : 			ARRAY[1..4] OF ST_CTRL_PT2_PARAMS;

	
	stCTRL_ParaController_Ex	:			ARRAY[1..4] OF ST_CTRL_ParaController;
	stCTRL_ParaController_In	:			ARRAY[1..4] OF ST_CTRL_ParaController;
	stCTRL_TempCtrlParameter	:			ARRAY[1..4] OF ST_CTRL_TempCtrlParameter;
	
	fbCTRL_TempController		:			ARRAY[1..4] OF FB_CTRL_TempController;
		
	eCTRL_STATE					:			ARRAY[1..4] OF E_CTRL_STATE;
	
	e_Heat_Mode					:			E_CTRL_ControlMode 			:= eCTRL_ControlMode_HEATING;
	e_Fail_Action				:			E_CTRL_ReactionOnFailure 	:= eCTRL_ReactionOnFailure_NoFailure;
		
	s_bError					:			BOOL;
	s_nErrorID					:			E_CTRL_ERRORCODES;
	s_fMaxOvershoot				:			LREAL;
	
	s_bFirst					:			BOOL := TRUE;
	
	(* Ramp Parameter Set *)
	s_bRamp_Use				    :			BOOL;	
	s_fRamp_Rate				:			ARRAY[1..4] OF LREAL := [10 , 10, 10 , 10 ];
	s_fRamp_Out 			    : 			ARRAY[1..4] OF LREAL;	
	
	(* =============== Setting Item 입력 =============== *)
	
	(* PID Set Parameter *)
	s_fP_Value						:			ARRAY[1..4] OF LREAL					;
	s_tI_Value						:			ARRAY[1..4] OF TIME						;
	s_tD_Value						:			ARRAY[1..4] OF TIME						;
	
	(* Power Limit Set *)
	s_fPowLimit					:			ARRAY[1..4] OF LREAL;
	
	(* Manual Control 시 Power 출력값 *)
	s_fSetManual					:			ARRAY[1..4] OF LREAL;
	
	(*	Heater Mode	*)
	s_eCTRL_MODE					:			ARRAY[1..4] OF E_CTRL_MODE;			(* Auto Mode 동작은 2 : eCTRL_MODE_ACTIVE 설정 *)
	
	(*	온도 설정 입력	*)
	s_fSet_Value					:			ARRAY[1..4] OF LREAL;
	s_fLast_Set_Value            	:           ARRAY[1..4] OF LREAL;
	s_bStart						:			BOOL;
	
	(*	비상정지	*)
	bEmergency_Stop					:			ARRAY[1..4] OF BOOL ;
	
	fbCTRL_RAMP_GENERATOR			 :   ARRAY[1..4] OF FB_CTRL_RAMP_GENERATOR;
	stCTRL_RAMP_GENERATOR_PARAMS     :   ARRAY[1..4] OF ST_CTRL_RAMP_GENERATOR_PARAMS;
	
	System_step	: INT;
	
	i    :   INT ;
	
	master_Zone_AVG	                 :   ARRAY[1..4] OF LREAL;
	
END_VAR

(* ================ Simulation Constant Parameter =======================*)
VAR CONSTANT
	fKp							:			ARRAY[1..4] OF REAL := [16.5, 17.5, 18.5, 19.5];
	fInit_Temp					:			ARRAY[1..4] OF REAL := [23.5, 24.5, 23.9, 24.2];
	tTimeConstant				:			ARRAY[1..4] OF TIME := [T#251.4S, T#301.4S, T#275.4S, T#292.4S];
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF sgbl.slave_bsimulation THEN
	SIMULATION();
END_IF

FOR i:=1 TO 4 BY 1 DO
	IF bEmergency_Stop[i] THEN
		s_fSet_Value[i] := 0;
		s_fPowLimit[i] := 0;
		s_eCTRL_MODE[i] := eCTRL_MODE_IDLE;
		fbCTRL_TempController[i]( eCtrlMode               := s_eCTRL_MODE[i],      
				  bSelSetpoint            := FALSE,
				  fw1                     := s_fSet_Value[i],
				  fw2                     := ,            
				  fX                      := s_fPV_Value[i],      
				  fyManual                := s_fSetManual[i],
				  sParaControllerExternal := stCTRL_ParaController_Ex[i],
				  sControllerParameter    := stCTRL_TempCtrlParameter[i]
				  );
	ELSE
		s_fSet_Value[i] := sgbl.slave_fTargetTemp[i];
		s_fPowLimit[i] := sgbl.slave_fPowLimit_[i];
		s_eCTRL_MODE[i] := sgbl.slave_eCTRL_MODE_[i];
	END_IF
END_FOR

IF s_bFirst THEN
	DEFAULT_PARA_SET();
	s_bFirst := FALSE ;
	System_step :=0;
END_IF

CASE System_step OF
		
	0:
		
		IF sgbl.slave_bStart_ THEN
			FOR i:=1 TO 4 BY 1 DO
				s_fLast_Set_Value[i] := s_fSet_Value[i];
				//s_eCTRL_MODE[i] := sgbl.slave_eCTRL_MODE_[i];
				System_step := 1;
			END_FOR
		ELSE
			System_step := 0;
		END_IF
	
	1:
		FOR i:=1 TO 4 BY 1 DO
			s_fP_Value[i] :=sgbl.slave_fP_Value_[i];
			s_tI_Value[i] :=LREAL_TO_TIME(sgbl.slave_tI_Value_[i]);
			s_tD_Value[i] :=LREAL_TO_TIME(sgbl.slave_tD_Value_[i]);
			
			IF s_fP_Value[i] <= 0 THEN
				s_fP_Value[i] := 0.1;
			ELSE
				s_fP_Value[i] := s_fP_Value[i];
			END_IF

			stCTRL_ParaController_Ex[i].KpHeat := s_fP_Value[i];	
			stCTRL_ParaController_Ex[i].TnHeat := s_tI_Value[i];
			stCTRL_ParaController_Ex[i].TvHeat := s_tD_Value[i];
			stCTRL_ParaController_Ex[i].TdHeat := T#1S;
			
			System_step := 2;
			
		END_FOR
		
		System_step := 2;

	2:
		//s_fPowLimit:=sgbl.slave_fPowLimit_;
		
		FOR i:=1 TO 4 BY 1 DO
			IF s_fPowLimit[i] > 100 THEN
				s_fPowLimit[i] := 100;
			ELSE 
				s_fPowLimit[i] := s_fPowLimit[i];
			END_IF
		
			stCTRL_TempCtrlParameter[i].fYMax := s_fPowLimit[i];
		
  
			//s_fSet_Value[i] :=  sgbl.slave_fTargetTemp[i];
			s_bRamp_Use     :=  sgbl.slave_bRamp_Enable;
			s_fRamp_Rate    :=  sgbl.slave_fRamp_Value;
			
			stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloNeg := s_fRamp_Rate[i] / 60.0;
			stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloPos := s_fRamp_Rate[i] / 60.0;
			
			System_step := 3;
		
		END_FOR
 		
		System_step := 3;
	
	3:
		s_fSetManual   := sgbl.slave_fSetManual_;
		
		FOR i:=1 TO 4 BY 1 DO
		
			IF s_fSetManual[i] > 100 THEN
				s_fSetManual[i] := 100;
			ELSE
				s_fSetManual := s_fSetManual;
			END_IF

			stCTRL_TempCtrlParameter[i].fYManual         :=   s_fSetManual[i];          
			stCTRL_TempCtrlParameter[i].fYOnFailure      :=   s_fSet_Value[i];
		END_FOR
		
		System_step := 4;
  	
	4:
		FOR i:=1 TO 4 BY 1 DO
			fbCTRL_TempController[i]( eCtrlMode               := sgbl.slave_eCTRL_MODE_[i],      
									  bSelSetpoint            := FALSE,
									  fw1                     := s_fSet_Value[i],
									  fw2                     := ,            
									  fX                      := s_fPV_Value[i],      
									  fyManual                := s_fSetManual[i],
									  sParaControllerExternal := stCTRL_ParaController_Ex[i],
									  sControllerParameter    := stCTRL_TempCtrlParameter[i]
									  );
	  	END_FOR
		
		System_step := 10;
	   
	10:					  
		sgbl.slave_bStart_ := FALSE;
		System_step := 0;
		
END_CASE

Ramping();

FOR i:=1 TO 4 BY 1 DO 
	fbCTRL_TempController[i](
                 fw1                       := s_fRamp_Out[i],
                 fX                        := s_fPV_Value[i],    
                 sParaControllerExternal   := stCTRL_ParaController_Ex[i],
                 sControllerParameter      := stCTRL_TempCtrlParameter[i],
                 fYAnalog                   => s_fMV_Out[i],
                 bYPWMPos                   => ,
                 bYPWMNeg                   => ,
                 dwAlarm                    => ,
                 fMaxOverShoot              => s_fMaxOvershoot,
                 tStartUpTime               => ,
                 eCtrlState                 => eCTRL_STATE[i],
                 sParaControllerInternal    => stCTRL_ParaController_In[i],
                 bError                     => s_bError,
                 eErrorId                   => s_nErrorID
                );
END_FOR
mgbl.master_fMV_Out:= s_fPV_Value;]]></ST>
    </Implementation>
    <Action Name="DEFAULT_PARA_SET" Id="{d227d564-1dc7-4f9c-9a58-3b59ce4af21d}">
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO 4 DO
	stCTRL_TempCtrlParameter[i].iMode				:=	e_Heat_Mode;
	stCTRL_TempCtrlParameter[i].iReactionOnFailure  :=	e_Fail_Action;
	stCTRL_TempCtrlParameter[i].dwAlarmSupp		    :=	16#FF_FF_FF_FF;		(* alarm suppression  Default 사용 *)
	stCTRL_TempCtrlParameter[i].fWMin				:=	0.0;
	stCTRL_TempCtrlParameter[i].fWMax				:=	500;
	stCTRL_TempCtrlParameter[i].bEnableSoftStart	:=	FALSE;
	stCTRL_TempCtrlParameter[i].fWStartUp			:=	30.0;
	stCTRL_TempCtrlParameter[i].tStartUp			:=	T#1S;
	stCTRL_TempCtrlParameter[i].bStartUpRamping	    :=	FALSE;
	stCTRL_TempCtrlParameter[i].fWStartUpVeloPos	:=	0.1;
	stCTRL_TempCtrlParameter[i].fWStartUpVeloNeg	:=	0.1;
	stCTRL_TempCtrlParameter[i].bFilter			    :=	FALSE;
	stCTRL_TempCtrlParameter[i].tFilter			    :=	T#0S;
	stCTRL_TempCtrlParameter[i].bDeadband			:=	FALSE;
	stCTRL_TempCtrlParameter[i].fEDeadband			:=	0.0;
	stCTRL_TempCtrlParameter[i].tPWMCycleTime		:=	T#1S;
	stCTRL_TempCtrlParameter[i].tPWMMinOffTime		:=	T#0S;
	stCTRL_TempCtrlParameter[i].tPWMMinOnTime		:=	T#0S;
	stCTRL_TempCtrlParameter[i].tPWMWaitingTime	    :=	T#0S;
	stCTRL_TempCtrlParameter[i].fYThresholdOff		:=	0.0;
	stCTRL_TempCtrlParameter[i].fYThresholdOn		:=	0.0;
	stCTRL_TempCtrlParameter[i].TempLow			    :=	-10.0;
	stCTRL_TempCtrlParameter[i].TempLowLow			:=	-5.0;
	stCTRL_TempCtrlParameter[i].TempHigh			:=	5.0;
	stCTRL_TempCtrlParameter[i].TempHighHigh		:=	10.0;
	stCTRL_TempCtrlParameter[i].TempAbsoluteHigh	:=	300.0;
	stCTRL_TempCtrlParameter[i].TempAbsoluteLow	    :=	0.0;
	stCTRL_TempCtrlParameter[i].tCtrlCycleTime		:= 	tCtrlCycleTime;
	stCTRL_TempCtrlParameter[i].tTaskCycleTime		:= 	tTaskCycleTime;
	stCTRL_TempCtrlParameter[i].fYMin				:=	0.0;
	stCTRL_TempCtrlParameter[i].iControllerType	    := eCTRL_ControllerType_PID;
	stCTRL_TempCtrlParameter[i].iFilterType		    := eCTRL_FilterType_FIRSTORDER;
	stCTRL_TempCtrlParameter[i].bEnablePreController:= FALSE;
	stCTRL_TempCtrlParameter[i].bEnableZones 		:= FALSE;
	stCTRL_TempCtrlParameter[i].bEnableCVFilter     := FALSE;
	
	stCTRL_TempCtrlParameter[i].bSelCtrlParameterSet := TRUE;
	
	stCTRL_RAMP_GENERATOR_PARAMS[i].tCtrlCycleTime		:= 	tCtrlCycleTime;
	stCTRL_RAMP_GENERATOR_PARAMS[i].tTaskCycleTime		:= 	tTaskCycleTime;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="RAMPING" Id="{ce9357c7-1742-4ea4-90db-f1888d078592}">
      <Implementation>
        <ST><![CDATA[
;
IF s_bRamp_Use THEN
	FOR i:=1 TO 4 BY 1 DO
		fbCTRL_RAMP_GENERATOR[i]( bEnable   := s_bRamp_Use,
								fStart   := s_fLast_Set_Value[i],
								fTarget  := s_fSet_Value[i],
								stParams := stCTRL_RAMP_GENERATOR_PARAMS[i],
								fOut   => s_fRamp_Out[i],
								fVeloOut  => ,
								bValueReached => ,
								eErrorId => ,
								bError =>
								)
	;
	END_FOR					

ELSE
	FOR i:=1 TO 4 BY 1 DO
		s_fRamp_Out[i] := s_fSet_Value[i];
	;
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="SIMULATION" Id="{80689f6d-fc40-42f3-b7c8-65ca5280299d}">
      <Implementation>
        <ST><![CDATA[

FOR i:=1 TO 4 BY 1 DO
	stPTParams[i].tTaskCycleTime	:= tTaskCycleTime;
	stPTParams[i].tCtrlCycleTime	:= tCtrlCycleTime;
	stPTParams[i].tT1				:= stPTParams[i].tT2 := tTimeConstant[i];
	stPTParams[i].fKp				:= fKp[i];


	fbCTRL_PT2[i](
					fIn			:= s_fMV_Out[i] ,
					eMode		:= eCtrl_MODE_ACTIVE,
					stParams	:= stPTParams[i],
					fOut		=> fPV_Value_[i]
					);	
					
	IF fPV_Value_[i] <= fInit_Temp[i] THEN
		s_fPV_Value[i] := fInit_Temp[i];
	ELSE
		s_fPV_Value[i] := fPV_Value_[i];
	END_IF 	
	
END_FOR

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="slave">
      <LineId Id="600" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="492" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="239" Count="0" />
      <LineId Id="513" Count="7" />
      <LineId Id="512" Count="0" />
      <LineId Id="494" Count="0" />
      <LineId Id="500" Count="1" />
      <LineId Id="498" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="493" Count="0" />
      <LineId Id="100" Count="8" />
      <LineId Id="401" Count="0" />
      <LineId Id="109" Count="34" />
      <LineId Id="230" Count="0" />
      <LineId Id="144" Count="6" />
      <LineId Id="152" Count="16" />
      <LineId Id="228" Count="1" />
      <LineId Id="227" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="171" Count="5" />
      <LineId Id="178" Count="20" />
      <LineId Id="200" Count="25" />
      <LineId Id="480" Count="0" />
    </LineIds>
    <LineIds Name="slave.DEFAULT_PARA_SET">
      <LineId Id="2" Count="40" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="slave.RAMPING">
      <LineId Id="2" Count="21" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="slave.SIMULATION">
      <LineId Id="24" Count="1" />
      <LineId Id="2" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="5" Count="9" />
      <LineId Id="34" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>