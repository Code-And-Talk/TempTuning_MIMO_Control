<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="slave" Id="{9ab2669f-726a-4789-9ecc-1bd43afc795d}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM slave
VAR
	fPV_Value_					:			ARRAY[1..4] OF LREAL ;
	
	tTime						:			TIME ;
	tTaskCycleTime				:			TIME := T#1MS ;
	tCtrlCycleTime				:			TIME := T#200MS ;
	
	fbCTRL_PT2				    : 			ARRAY[1..4] OF FB_CTRL_PT2 ;
	stPTParams				    : 			ARRAY[1..4] OF ST_CTRL_PT2_PARAMS ;

	stCTRL_ParaController_Ex	:			ARRAY[1..4] OF ST_CTRL_ParaController ;
	stCTRL_ParaController_In	:			ARRAY[1..4] OF ST_CTRL_ParaController ;
	stCTRL_TempCtrlParameter	:			ARRAY[1..4] OF ST_CTRL_TempCtrlParameter ;
	
	fbCTRL_TempController		:			ARRAY[1..4] OF FB_CTRL_TempController ;
		
	eCTRL_STATE					:			ARRAY[1..4] OF E_CTRL_STATE ;
	
	e_Heat_Mode					:			E_CTRL_ControlMode 			:= eCTRL_ControlMode_HEATING ;
	e_Fail_Action				:			E_CTRL_ReactionOnFailure 	:= eCTRL_ReactionOnFailure_NoFailure ;
		
	s_bError					:			BOOL ;
	s_nErrorID					:			E_CTRL_ERRORCODES ;
	s_fMaxOvershoot				:			LREAL ;
	
	s_bFirst					:			BOOL := TRUE ;
	
	(* Ramp Parameter Set *)
	s_bRamp_Use				    :			ARRAY[1..4] OF BOOL ;	
	s_fRamp_Rate				:			ARRAY[1..4] OF LREAL ;
	
	(* =============== Setting Item 입력 =============== *)
	
	(* PID Set Parameter *)
	s_fP_Value						:			ARRAY[1..4] OF LREAL ;
	s_tI_Value						:			ARRAY[1..4] OF TIME	;
	s_tD_Value						:			ARRAY[1..4] OF TIME	;
	
	(* Power Limit Set *)
	s_fPowLimit					:			ARRAY[1..4] OF LREAL ;
	
	(* Manual Control 시 Power 출력값 *)
	s_fSetManual					:			ARRAY[1..4] OF LREAL ;
	
	(*	Heater Mode	*)
	s_eCTRL_MODE					:			ARRAY[1..4] OF E_CTRL_MODE ;			(* Auto Mode 동작은 2 : eCTRL_MODE_ACTIVE 설정 *)
	
	(*	온도 설정 입력	*)
	s_fSet_Value					:			ARRAY[1..4] OF LREAL ;
	s_fLast_Set_Value            	:           ARRAY[1..4] OF LREAL ;

	
	(*	비상정지	*)
	//bEmergency_Stop					:			ARRAY[1..4] OF BOOL ;
	
	fbCTRL_RAMP_GENERATOR			 :   ARRAY[1..4] OF FB_CTRL_RAMP_GENERATOR ;
	stCTRL_RAMP_GENERATOR_PARAMS     :   ARRAY[1..4] OF ST_CTRL_RAMP_GENERATOR_PARAMS ;
	
	System_step	: INT ;
	
	i    :   INT ;
	
	master_Zone_AVG	                 :   ARRAY[1..4] OF LREAL ;
	
	m_Zone_Sum						 : LREAL;
	m_Zone_Avg						 :	LREAL;
	
END_VAR

(* ================ Simulation Constant Parameter =======================*)
VAR CONSTANT
	fKp							:			ARRAY[1..4] OF REAL := [15.5, 15.2, 15.7, 15.8] ;
	fInit_Temp					:			ARRAY[1..4] OF REAL := [23.5, 23.8, 23.9, 23.7] ;
	tTimeConstant				:			ARRAY[1..4] OF TIME := [T#251.4S, T#252.4S, T#254.4S, T#256.4S] ;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
IF gbl.slave_bsimulation THEN
   SIMULATION();
END_IF
*)

IF gbl.slave_bError THEN
   gbl.slave_bEmergency_Stop := TRUE ;
END_IF

FOR i:=1 TO 4 BY 1 DO
   IF gbl.slave_bEmergency_Stop THEN
      s_fSet_Value[i] := 0;
      s_fPowLimit[i] := 0;
      s_eCTRL_MODE[i] := eCTRL_MODE_IDLE;
      fbCTRL_TempController[i]( eCtrlMode := s_eCTRL_MODE[i],      
              bSelSetpoint            := FALSE,
              fw1                     := s_fSet_Value[i],
              fw2                     := ,            
              fX                      := gbl.slave_fPV_Value[i],      
              fyManual                := s_fSetManual[i],
              sParaControllerExternal := stCTRL_ParaController_Ex[i],
              sControllerParameter    := stCTRL_TempCtrlParameter[i]
              );
   ELSE
      s_fPowLimit[i] := gbl.slave_fPowLimit[i];
      s_eCTRL_MODE[i] := gbl.slave_eCTRL_MODE[i];
   END_IF
END_FOR

IF s_bFirst THEN
   DEFAULT_PARA_SET();
   s_bFirst := FALSE ;
   System_step :=0;
END_IF

CASE System_step OF
      
   0:

      s_bRamp_Use     :=  gbl.slave_bRamp_Enable;
      s_fRamp_Rate    :=  gbl.slave_fRamp_Value;
	  
      IF gbl.slave_bStart THEN
		IF gbl.tuning_mode THEN
			m_Zone_Sum := 0;
			FOR i:=1 TO 4 BY 1 DO
				m_Zone_Sum := m_Zone_Sum + gbl.slave_fPV_Value[i];
			END_FOR
				m_Zone_Avg := m_Zone_Sum / 4;
			FOR i:=1 TO 4 BY 1 DO
				s_fLast_Set_Value[i] := gbl.slave_fPV_Value[i];
				s_fSet_Value[i] := m_Zone_Avg;
			END_FOR
		ELSE
			FOR i:=1 TO 4 BY 1 DO
				s_fLast_Set_Value[i] := s_fSet_Value[i];
			END_FOR
			s_fSet_Value := gbl.slave_fTargetTemp;
		END_IF
        System_step := 1;
        gbl.slave_bStart := FALSE;
      ELSE
        System_step := 0;
		IF gbl.isChanged THEN
			IF gbl.isDropping THEN
				s_fLast_Set_Value := gbl.slave_fPV_Value;
			END_IF
			s_fSet_Value := gbl.slave_fTargetTemp;
			gbl.isChanged := FALSE;
		END_IF
		IF gbl.bRestart THEN
			gbl.slave_bstart := TRUE;
		END_IF
		(*
		IF gbl.isDropping THEN
			s_fLast_Set_Value := gbl.slave_fPV_Value;
			s_fSet_Value := gbl.slave_fTargetTemp;
			gbl.isDropping := FALSE;
		END_IF
		*)
      END_IF
      

   1:
      FOR i:=1 TO 4 BY 1 DO
         s_fP_Value[i] := gbl.slave_fP_Value[i];
         s_tI_Value[i] := LREAL_TO_TIME(gbl.slave_tI_Value[i]);
         s_tD_Value[i] := LREAL_TO_TIME(gbl.slave_tD_Value[i]);
         
         IF s_fP_Value[i] <= 0 THEN
            s_fP_Value[i] := 0.1;
         ELSE
            s_fP_Value[i] := s_fP_Value[i];
         END_IF

         stCTRL_ParaController_Ex[i].KpHeat := s_fP_Value[i];   
         stCTRL_ParaController_Ex[i].TnHeat := s_tI_Value[i];
         stCTRL_ParaController_Ex[i].TvHeat := s_tD_Value[i];
         stCTRL_ParaController_Ex[i].TdHeat := T#1S;
         
         System_step := 2;
         
      END_FOR
      
      System_step := 2;

   2:
      
      FOR i:=1 TO 4 BY 1 DO
         IF s_fPowLimit[i] > 100 THEN
            s_fPowLimit[i] := 100;
         ELSE 
            s_fPowLimit[i] := s_fPowLimit[i];
         END_IF
      
         stCTRL_TempCtrlParameter[i].fYMax := s_fPowLimit[i];
         
         stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloNeg := s_fRamp_Rate[i] / 60.0;
         stCTRL_RAMP_GENERATOR_PARAMS[i].fVeloPos := s_fRamp_Rate[i] / 60.0;
         
         System_step := 3;
      
      END_FOR
       
      System_step := 3;
   
   3:
      
      FOR i:=1 TO 4 BY 1 DO
      
         IF s_fSetManual[i] > 100 THEN
            s_fSetManual[i] := 100;
         ELSE
            s_fSetManual := s_fSetManual;
         END_IF

         stCTRL_TempCtrlParameter[i].fYManual         :=   s_fSetManual[i];          
         stCTRL_TempCtrlParameter[i].fYOnFailure      :=   s_fSet_Value[i];
      END_FOR
      
      System_step := 4;
     
   4:
      FOR i:=1 TO 4 BY 1 DO
         fbCTRL_TempController[i]( eCtrlMode               := gbl.slave_eCTRL_MODE[i],      
                             bSelSetpoint            := FALSE,
                             fw1                     := s_fSet_Value[i],
                             fw2                     := ,            
                             fX                      := gbl.slave_fPV_Value[i],      
                             fyManual                := s_fSetManual[i],
                             sParaControllerExternal := stCTRL_ParaController_Ex[i],
                             sControllerParameter    := stCTRL_TempCtrlParameter[i]
                             );
        END_FOR
      
      System_step := 100;
      
   100:
      System_step := 0;
      
END_CASE


Ramping();

FOR i:=1 TO 4 BY 1 DO 
   
   fbCTRL_TempController[i](
                 fw1                       := gbl.slave_fRamp_Out[i],
                 fX                        := gbl.slave_fPV_Value[i],    
                 sParaControllerExternal   := stCTRL_ParaController_Ex[i],
                 sControllerParameter      := stCTRL_TempCtrlParameter[i],
                 fYAnalog                   => gbl.slave_fMV_Out[i],
                 bYPWMPos                   => ,
                 bYPWMNeg                   => ,
                 dwAlarm                    => ,
                 fMaxOverShoot              => s_fMaxOvershoot,
                 tStartUpTime               => ,
                 eCtrlState                 => eCTRL_STATE[i],
                 sParaControllerInternal    => stCTRL_ParaController_In[i],
                 bError                     => gbl.slave_bError,
                 eErrorId                   => gbl.slave_nErrorID
                );
END_FOR]]></ST>
    </Implementation>
    <Action Name="DEFAULT_PARA_SET" Id="{d227d564-1dc7-4f9c-9a58-3b59ce4af21d}">
      <Implementation>
        <ST><![CDATA[FOR i := 1 TO 4 DO
	stCTRL_TempCtrlParameter[i].iMode				:=	e_Heat_Mode;
	stCTRL_TempCtrlParameter[i].iReactionOnFailure  :=	e_Fail_Action;
	stCTRL_TempCtrlParameter[i].dwAlarmSupp		    :=	16#FF_FF_FF_FF;		(* alarm suppression  Default 사용 *)
	stCTRL_TempCtrlParameter[i].fWMin				:=	0.0;
	stCTRL_TempCtrlParameter[i].fWMax				:=	500;
	stCTRL_TempCtrlParameter[i].bEnableSoftStart	:=	FALSE;
	stCTRL_TempCtrlParameter[i].fWStartUp			:=	30.0;
	stCTRL_TempCtrlParameter[i].tStartUp			:=	T#1S;
	stCTRL_TempCtrlParameter[i].bStartUpRamping	    :=	FALSE;
	stCTRL_TempCtrlParameter[i].fWStartUpVeloPos	:=	0.1;
	stCTRL_TempCtrlParameter[i].fWStartUpVeloNeg	:=	0.1;
	stCTRL_TempCtrlParameter[i].bFilter			    :=	FALSE;
	stCTRL_TempCtrlParameter[i].tFilter			    :=	T#0S;
	stCTRL_TempCtrlParameter[i].bDeadband			:=	FALSE;
	stCTRL_TempCtrlParameter[i].fEDeadband			:=	0.0;
	stCTRL_TempCtrlParameter[i].tPWMCycleTime		:=	T#1S;
	stCTRL_TempCtrlParameter[i].tPWMMinOffTime		:=	T#0S;
	stCTRL_TempCtrlParameter[i].tPWMMinOnTime		:=	T#0S;
	stCTRL_TempCtrlParameter[i].tPWMWaitingTime	    :=	T#0S;
	stCTRL_TempCtrlParameter[i].fYThresholdOff		:=	0.0;
	stCTRL_TempCtrlParameter[i].fYThresholdOn		:=	0.0;
	stCTRL_TempCtrlParameter[i].TempLow			    :=	-10.0;
	stCTRL_TempCtrlParameter[i].TempLowLow			:=	-5.0;
	stCTRL_TempCtrlParameter[i].TempHigh			:=	5.0;
	stCTRL_TempCtrlParameter[i].TempHighHigh		:=	10.0;
	stCTRL_TempCtrlParameter[i].TempAbsoluteHigh	:=	300.0;
	stCTRL_TempCtrlParameter[i].TempAbsoluteLow	    :=	0.0;
	stCTRL_TempCtrlParameter[i].tCtrlCycleTime		:= 	tCtrlCycleTime;
	stCTRL_TempCtrlParameter[i].tTaskCycleTime		:= 	tTaskCycleTime;
	stCTRL_TempCtrlParameter[i].fYMin				:=	0.0;
	stCTRL_TempCtrlParameter[i].iControllerType	    := eCTRL_ControllerType_PID;
	stCTRL_TempCtrlParameter[i].iFilterType		    := eCTRL_FilterType_FIRSTORDER;
	stCTRL_TempCtrlParameter[i].bEnablePreController:= FALSE;
	stCTRL_TempCtrlParameter[i].bEnableZones 		:= FALSE;
	stCTRL_TempCtrlParameter[i].bEnableCVFilter     := FALSE;
	
	stCTRL_TempCtrlParameter[i].bSelCtrlParameterSet := TRUE;
	
	stCTRL_RAMP_GENERATOR_PARAMS[i].tCtrlCycleTime		:= 	tCtrlCycleTime;
	stCTRL_RAMP_GENERATOR_PARAMS[i].tTaskCycleTime		:= 	tTaskCycleTime;
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="RAMPING" Id="{ce9357c7-1742-4ea4-90db-f1888d078592}">
      <Implementation>
        <ST><![CDATA[
;
FOR i:=1 TO 4 BY 1 DO
	IF s_bRamp_Use[i] THEN

		fbCTRL_RAMP_GENERATOR[i]( bEnable   := s_bRamp_Use[i],
								fStart   := s_fLast_Set_Value[i],
								fTarget  := s_fSet_Value[i],
								stParams := stCTRL_RAMP_GENERATOR_PARAMS[i],
								fOut   => gbl.slave_fRamp_Out[i],
								fVeloOut  => ,
								bValueReached => ,
								eErrorId => ,
								bError =>
								)
	;			

	ELSE
			gbl.slave_fRamp_Out[i] := s_fSet_Value[i];
		;
	END_IF
END_FOR	]]></ST>
      </Implementation>
    </Action>
    <Action Name="SIMULATION" Id="{80689f6d-fc40-42f3-b7c8-65ca5280299d}">
      <Implementation>
        <ST><![CDATA[

FOR i:=1 TO 4 BY 1 DO
	stPTParams[i].tTaskCycleTime	:= tTaskCycleTime;
	stPTParams[i].tCtrlCycleTime	:= tCtrlCycleTime;
	stPTParams[i].tT1				:= stPTParams[i].tT2 := tTimeConstant[i];
	stPTParams[i].fKp				:= fKp[i];


	fbCTRL_PT2[i](
					fIn			:= gbl.slave_fMV_Out[i] ,
					eMode		:= eCtrl_MODE_ACTIVE,
					stParams	:= stPTParams[i],
					fOut		=> fPV_Value_[i]
					);	
					
	IF fPV_Value_[i] <= fInit_Temp[i] THEN
		gbl.slave_fPV_Value[i] := fInit_Temp[i];
	ELSE
		gbl.slave_fPV_Value[i] := fPV_Value_[i];
	END_IF 	
	
END_FOR

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="slave">
      <LineId Id="1153" Count="40" />
      <LineId Id="1414" Count="0" />
      <LineId Id="1394" Count="0" />
      <LineId Id="1195" Count="0" />
      <LineId Id="1383" Count="0" />
      <LineId Id="1514" Count="0" />
      <LineId Id="1398" Count="1" />
      <LineId Id="1417" Count="0" />
      <LineId Id="1397" Count="0" />
      <LineId Id="1418" Count="0" />
      <LineId Id="1384" Count="0" />
      <LineId Id="1416" Count="0" />
      <LineId Id="1405" Count="0" />
      <LineId Id="1386" Count="0" />
      <LineId Id="1406" Count="0" />
      <LineId Id="1387" Count="0" />
      <LineId Id="1407" Count="0" />
      <LineId Id="1419" Count="0" />
      <LineId Id="1385" Count="0" />
      <LineId Id="1202" Count="3" />
      <LineId Id="1420" Count="0" />
      <LineId Id="1436" Count="1" />
      <LineId Id="1435" Count="0" />
      <LineId Id="1421" Count="0" />
      <LineId Id="1595" Count="0" />
      <LineId Id="1422" Count="0" />
      <LineId Id="1598" Count="1" />
      <LineId Id="1597" Count="0" />
      <LineId Id="1433" Count="0" />
      <LineId Id="1424" Count="0" />
      <LineId Id="1428" Count="0" />
      <LineId Id="1425" Count="0" />
      <LineId Id="1429" Count="0" />
      <LineId Id="1426" Count="0" />
      <LineId Id="1434" Count="0" />
      <LineId Id="1206" Count="102" />
      <LineId Id="225" Count="0" />
    </LineIds>
    <LineIds Name="slave.DEFAULT_PARA_SET">
      <LineId Id="2" Count="40" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="slave.RAMPING">
      <LineId Id="2" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="4" Count="12" />
      <LineId Id="18" Count="1" />
      <LineId Id="21" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="slave.SIMULATION">
      <LineId Id="24" Count="1" />
      <LineId Id="2" Count="1" />
      <LineId Id="27" Count="0" />
      <LineId Id="5" Count="9" />
      <LineId Id="34" Count="0" />
      <LineId Id="29" Count="3" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>