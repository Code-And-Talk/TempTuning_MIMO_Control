<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="MAIN" Id="{505c9152-54dc-4c75-95e2-5b952caf9f7b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bSimulation : BOOL;	

	systemStep : INT:=0;
	
	fMV_Out						:			ARRAY[1..4] OF LREAL;
	fPV_Value					:			ARRAY[1..4] OF LREAL;
	fPV_Value_					:			ARRAY[1..4] OF LREAL;
	
	tTime						:			TIME;
	tTaskCycleTime				:			TIME := T#1MS;
	tCtrlCycleTime				:			TIME := T#200MS;
	
	fbCTRL_PT2					: 			ARRAY[1..4] OF FB_CTRL_PT2;
	
	stPTParams					: 			ARRAY[1..4] OF ST_CTRL_PT2_PARAMS;
	
	stCTRL_ParaController_Ex	:			ARRAY[1..4] OF ST_CTRL_ParaController;
	stCTRL_ParaController_In	:			ARRAY[1..4] OF ST_CTRL_ParaController;
	stCTRL_TempCtrlParameter	:			ARRAY[1..4] OF ST_CTRL_TempCtrlParameter;
	
	fbCTRL_TempController		:			ARRAY[1..4] OF FB_CTRL_TempController;
		
	eCTRL_STATE					:			ARRAY[1..4] OF E_CTRL_STATE;
	
	e_Heat_Mode					:			E_CTRL_ControlMode 			:= eCTRL_ControlMode_HEATING;
	e_Fail_Action				:			E_CTRL_ReactionOnFailure 	:= eCTRL_ReactionOnFailure_NoFailure;
	
	bError						:			BOOL;
	nErrorID					:			INT;
	fMaxOvershoot				:			LREAL;
	
	bFirst: BOOL := TRUE;
	
	(* Ramp Parameter Set *)
	bRampingUse					:			BOOL;	
	fRampingRate				:			LREAL						:= 10.0;
	
	P_Value_:ARRAY[1..4] OF LREAL;
	I_Value_:ARRAY[1..4] OF TIME;
	D_Value_:ARRAY[1..4] OF TIME; 
	
	fPowerLimit_:REAL;
	
	fSetManual_					:			LREAL;
	
	eCTRL_MODE_					:			E_CTRL_MODE;
	
	fSet_Value_:ARRAY[1..4] OF LREAL;
	
	fLast_Set_Value:ARRAY[1..4] OF LREAL;
	
	bStart_:BOOL;
	(*	비상정지	*)
	bEmergency_Stop:BOOL;
	
	(* =====================================Ramping ===============================*)
	fbCTRL_RAMP_GENERATOR       :            ARRAY[1..4] OF  FB_CTRL_RAMP_GENERATOR;
	stCTRL_RAMP_GENERATOR_PARAMS :           ST_CTRL_RAMP_GENERATOR_PARAMS;
	
	fRampingOut : ARRAY[1..4] OF LREAL;
	
	(* ==added mimoIndex ==*)
	mimoIndex : INT := 1;
	
	i: INT:=1;
	j: INT;
END_VAR

(* ================ Simulation Constant Parameter =======================*)
VAR CONSTANT
	fKp							:			ARRAY[1..4] OF  REAL := [16.5,17,17.5,18]; // 15이상 20 이하
	fInit_Temp					:			ARRAY[1..4] OF  REAL := [23,23.5,24,24.5]; //시작 temp 23~25
	tTimeConstant				:			ARRAY[1..4] OF  TIME := [T#250S,T#251.4S,T#260S,T#300S]; // 250~300
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bSimulation THEN
	SIMULATION();
END_IF

CASE systemStep OF
	0:
		IF bFirst THEN
				DEFAULT_PARA_SET();
				bFirst := FALSE;
		END_IF
		systemStep := 1;

	1:
		
		IF bEmergency_Stop THEN
			eCTRL_MODE_ := eCTRL_MODE_IDLE;
			bStart_ := TRUE;
		END_IF		
		systemStep := 2;

	2:
		bStart_ := gbl.bStart;
		IF bStart_ THEN
			FOR mimoIndex:=1 TO 4 DO
				fLast_Set_Value[mimoIndex] := fSet_Value_[mimoIndex];
				eCTRL_MODE_	:= gbl.eCTRL_MODE;
				
				(* PID Parameter Set *)
				P_Value_[mimoIndex]:= gbl.P_Value[mimoIndex];
				I_Value_[mimoIndex] := gbl.I_Value[mimoIndex];
				D_Value_[mimoIndex] := gbl.D_Value[mimoIndex];
				IF P_Value_[mimoIndex] <= 0 THEN
					P_Value_[mimoIndex] := 0.1;
				END_IF
				stCTRL_ParaController_Ex[mimoIndex].KpHeat := P_Value_[mimoIndex];				(* P_Value 최소값으로 0 사용 불가 *)
				stCTRL_ParaController_Ex[mimoIndex].TnHeat	:= I_Value_[mimoIndex];
				stCTRL_ParaController_Ex[mimoIndex].TvHeat := D_Value_[mimoIndex];
				stCTRL_ParaController_Ex[mimoIndex].TdHeat	:= T#1S;
			(*
				(* Temp Controller Parameter Set *)
				stCTRL_TempCtrlParameter.bEnableRamping		:=	bRampingUse;
				stCTRL_TempCtrlParameter.fWVeloPos			:=	fRampingRate / 60.0;
				stCTRL_TempCtrlParameter.fWVeloNeg			:=	fRampingRate / 60.0;
				*)
				fPowerLimit_:=gbl.fPowerLimit;
				IF fPowerLimit_ > 100 THEN
					fPowerLimit_ := 100;
				END_IF
				stCTRL_TempCtrlParameter[mimoIndex].fYMax				:=	fPowerLimit_;
				
				fSet_Value_[mimoIndex] := gbl.fTargetTemp;
				bRampingUse := gbl.bRampingEnable;
				fRampingRate := gbl.fRampingValue;
				
				stCTRL_RAMP_GENERATOR_PARAMS.fVeloNeg := fRampingRate / 60.0;
				stCTRL_RAMP_GENERATOR_PARAMS.fVeloPos := fRampingRate / 60.0;
				
				fSetManual_	:= gbl.fSetManual;
				IF fSetManual_ > 100 THEN
					fSetManual_ := 100;
				END_IF
				stCTRL_TempCtrlParameter[mimoIndex].fYManual			:=	fSetManual_;			(* Manual 사용을 원할경우 변수 입력 후  eCTRL_MODE 값을 Manual 선택 *) 
				stCTRL_TempCtrlParameter[mimoIndex].fYOnFailure		:=	fSet_Value_[mimoIndex];
				
				
				fbCTRL_TempController[mimoIndex](eCtrlMode					:= eCTRL_MODE_,		(* Control Mode 입력 0 : IDLE, 2 : Active, 3 : Manual, 4 := Reset *)
									  bSelSetpoint				:= FALSE,
									  fw1						:= fSet_Value_[mimoIndex],
									  fw2						:= ,				(* 사용안함 *)
									  fX						:= fPV_Value[mimoIndex],		(* Temp Reading Value Input *)
									  fyManual					:= fSetManual_,
									  sParaControllerExternal	:= stCTRL_ParaController_Ex[mimoIndex],
									  sControllerParameter		:= stCTRL_TempCtrlParameter[mimoIndex]
									 );
				
				bStart_ := gbl.bStart	:= FALSE;
			END_FOR
		END_IF
		systemStep := 3;
		
	3:
		RAMPING();
		FOR mimoIndex:=1 TO 4 DO
			fbCTRL_TempController[mimoIndex](
						  fw1						:= fRampingOut[mimoIndex],
						  fX						:= fPV_Value[mimoIndex],		(* Temp Reading Value Input *)
						  sParaControllerExternal	:= stCTRL_ParaController_Ex[mimoIndex],
						  sControllerParameter		:= stCTRL_TempCtrlParameter[mimoIndex],
						  fYAnalog					=> fMV_Out[mimoIndex],
						  bYPWMPos					=> ,
						  bYPWMNeg					=> ,
						  dwAlarm					=> ,
						  fMaxOverShoot				=> fMaxOvershoot,
						  tStartUpTime				=> ,
						  eCtrlState				=> eCTRL_STATE[mimoIndex],
						  sParaControllerInternal	=> stCTRL_ParaController_In[mimoIndex],
						  bError					=> bError,
						  eErrorId					=> nErrorID
						 );
		END_FOR
		systemStep := 1;
(*
	4:
		IF mimoIndex <= 3 THEN
			mimoIndex := mimoIndex + 1;
			ELSE
				mimoIndex := 1;
		END_IF;
		systemStep := 1;
	*)

END_CASE]]></ST>
    </Implementation>
    <Action Name="DEFAULT_PARA_SET" Id="{050ef481-b6a4-47d1-8f0e-4104ea15192f}">
      <Implementation>
        <ST><![CDATA[FOR mimoIndex:=1 TO 4 DO
	stCTRL_TempCtrlParameter[mimoIndex].iMode				:=	e_Heat_Mode;
	stCTRL_TempCtrlParameter[mimoIndex].iReactionOnFailure :=	e_Fail_Action;
	stCTRL_TempCtrlParameter[mimoIndex].dwAlarmSupp		:=	16#FF_FF_FF_FF;		(* alarm suppression  Default 사용 *)
	stCTRL_TempCtrlParameter[mimoIndex].fWMin				:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].fWMax				:=	500;
	stCTRL_TempCtrlParameter[mimoIndex].bEnableSoftStart	:=	FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].fWStartUp			:=	30.0;
	stCTRL_TempCtrlParameter[mimoIndex].tStartUp			:=	T#1S;
	stCTRL_TempCtrlParameter[mimoIndex].bStartUpRamping	:=	FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].fWStartUpVeloPos	:=	0.1;
	stCTRL_TempCtrlParameter[mimoIndex].fWStartUpVeloNeg	:=	0.1;
	stCTRL_TempCtrlParameter[mimoIndex].bFilter			:=	FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].tFilter			:=	T#0S;
	stCTRL_TempCtrlParameter[mimoIndex].bDeadband			:=	FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].fEDeadband			:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].tPWMCycleTime		:=	T#1S;
	stCTRL_TempCtrlParameter[mimoIndex].tPWMMinOffTime		:=	T#0S;
	stCTRL_TempCtrlParameter[mimoIndex].tPWMMinOnTime		:=	T#0S;
	stCTRL_TempCtrlParameter[mimoIndex].tPWMWaitingTime	:=	T#0S;
	stCTRL_TempCtrlParameter[mimoIndex].fYThresholdOff		:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].fYThresholdOn		:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempLow			:=	-10.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempLowLow			:=	-5.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempHigh			:=	5.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempHighHigh		:=	10.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempAbsoluteHigh	:=	300.0;
	stCTRL_TempCtrlParameter[mimoIndex].TempAbsoluteLow	:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].tCtrlCycleTime		:= 	tCtrlCycleTime;
	stCTRL_TempCtrlParameter[mimoIndex].tTaskCycleTime		:= 	tTaskCycleTime;
	stCTRL_TempCtrlParameter[mimoIndex].fYMin				:=	0.0;
	stCTRL_TempCtrlParameter[mimoIndex].iControllerType	:= eCTRL_ControllerType_PID;
	stCTRL_TempCtrlParameter[mimoIndex].iFilterType		:= eCTRL_FilterType_FIRSTORDER;
	stCTRL_TempCtrlParameter[mimoIndex].bEnablePreController 	:= FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].bEnableZones 		:= FALSE;
	stCTRL_TempCtrlParameter[mimoIndex].bEnableCVFilter 		:= FALSE;
	
	stCTRL_TempCtrlParameter[mimoIndex].bSelCtrlParameterSet := TRUE;
END_FOR
stCTRL_RAMP_GENERATOR_PARAMS.tCtrlCycleTime := tCtrlCycleTime;
stCTRL_RAMP_GENERATOR_PARAMS.tTaskCycleTime := tTaskCycleTime;]]></ST>
      </Implementation>
    </Action>
    <Action Name="RAMPING" Id="{193cf65b-14b5-4b15-9284-bf7f9bad1b80}">
      <Implementation>
        <ST><![CDATA[;
FOR mimoIndex:=1 TO 4 DO
	IF bRampingUse THEN
		fbCTRL_RAMP_GENERATOR[mimoIndex](bEnable := bRampingUse,
			fStart := fLast_Set_Value[mimoIndex],
			fTarget := fSet_Value_[mimoIndex],
			stParams := stCTRL_RAMP_GENERATOR_PARAMS,
			fOut=>fRampingOut[mimoIndex],
			fVeloOut=>,
			bValueReached=>,
			eErrorId=>,
			bError=>
			)
			
		;
		ELSE
			fRampingOut[mimoIndex] := fSet_Value_[mimoIndex];
		
			;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Action>
    <Action Name="SIMULATION" Id="{b73f7d6a-cc20-4de4-977f-df1f61a8365c}">
      <Implementation>
        <ST><![CDATA[// 실제 하드웨어에서 빠져야 할 시뮬레이션을 위한 코드
FOR i := 1 TO 4 DO
	stPTParams[i].tTaskCycleTime	:= tTaskCycleTime;
	stPTParams[i].tCtrlCycleTime	:= tCtrlCycleTime;
	stPTParams[i].tT1				:= stPTParams[i].tT2 := tTimeConstant[i];
	stPTParams[i].fKp				:= fKp[i];
	
	fbCTRL_PT2[i](
				fIn			:= fMV_Out[i] ,
				eMode		:= eCtrl_MODE_ACTIVE,
				stParams	:= stPTParams[i],
				fOut		=> fPV_Value_[i]
				);
END_FOR

FOR i:=1 TO 4 DO
	IF fPV_Value_[i] <= finit_Temp[i] THEN
		fPV_Value[i] := finit_Temp[i];
	ELSE
		fPV_Value[i] := fPV_Value_[i];
	END_IF
END_FOR


]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="MAIN">
      <LineId Id="418" Count="0" />
      <LineId Id="415" Count="0" />
      <LineId Id="433" Count="0" />
      <LineId Id="417" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="409" Count="0" />
      <LineId Id="102" Count="2" />
      <LineId Id="95" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="424" Count="0" />
      <LineId Id="110" Count="51" />
      <LineId Id="425" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="426" Count="0" />
      <LineId Id="163" Count="14" />
      <LineId Id="162" Count="0" />
      <LineId Id="427" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="326" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="328" Count="1" />
      <LineId Id="327" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="410" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.DEFAULT_PARA_SET">
      <LineId Id="2" Count="39" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.RAMPING">
      <LineId Id="2" Count="18" />
      <LineId Id="1" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="MAIN.SIMULATION">
      <LineId Id="14" Count="1" />
      <LineId Id="19" Count="9" />
      <LineId Id="17" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>